from collections import defaultdict
class Graph:
  def __init__(self,vertices):
    self.V = vertices
    self.graph = defaultdict(list)
  def addEdge(self,u,v):
    self.graph[u].append(v)
  def DFS(self,src,target,maxDepth):
    print(src,end=' ')
    if src == target : return True
    if maxDepth <= 0 : return False
    for i in self.graph[src]:
        if(self.DFS(i,target,maxDepth-1)):
          return True
    return False
  def DLS(self,src, target, maxDepth):
      if (self.DFS(src, target,maxDepth )):
        return True
      return False
print("Enter number of Vertices : ")
ver = int(input())
print("Enter number of edges : ")
e = int(input())
g = Graph (ver);
print('Enter the edges : ')
for i in range(e):
  x,y = [int(x) for x in (input().split())]
  g.addEdge(x,y)
#target = 6; maxDepth = 3; src = 0
target=int(input('Enter the goal node : '))
maxDepth=int(input('Enter the maximum depth : '))
source=int(input('Enter the source node : '))
print('Path : ')
if g.DLS(source, target, maxDepth) == True:
  print()
  print ("Target is reachable from source " +
    "within max depth")
else :
  print()
  print ("Target is NOT reachable from source " +
    "within max depth")

Output : 
Enter number of Vertices : 
7
Enter number of edges : 
6
Enter the edges : 
0 1
0 2
1 3
1 4
2 5
2 6
Enter the goal node : 6
Enter the maximum depth : 2
Enter the source node : 0
Path : 
0 1 3 4 2 5 6 
Target is reachable from source within max depth